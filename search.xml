<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>arthas分析客户现场请求过慢</title>
      <link href="/2023/10/13/Server%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%85%A2%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/"/>
      <url>/2023/10/13/Server%E6%8E%A5%E5%8F%A3%E8%BF%94%E5%9B%9E%E6%85%A2%E9%97%AE%E9%A2%98%E6%8E%92%E6%9F%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h2><p>客户反馈在使用过程中每次请求数据返回速度都很慢，并且时必现问题，因为客户是内网环境（客户的网络环境不允许外网访问）所以让同事到现场排查问题，发现所有的后端网络请求都很慢，不过目前项目在本地及开发、测试环境运行均无法复现问题。</p><h2 id="排查步骤："><a href="#排查步骤：" class="headerlink" title="排查步骤："></a>排查步骤：</h2><h3 id="1-打包一个包含arthas-jar的docker镜像重新部署"><a href="#1-打包一个包含arthas-jar的docker镜像重新部署" class="headerlink" title="1.打包一个包含arthas.jar的docker镜像重新部署"></a>1.打包一个包含arthas.jar的docker镜像重新部署</h3><h3 id="2-运行容器后进入容器"><a href="#2-运行容器后进入容器" class="headerlink" title="2.运行容器后进入容器"></a>2.运行容器后进入容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token builtin class-name">exec</span> <span class="token parameter variable">-it</span> <span class="token punctuation">[</span>容器名<span class="token punctuation">]</span> <span class="token function">sh</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-启动arthas"><a href="#3-启动arthas" class="headerlink" title="3.启动arthas"></a>3.启动arthas</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">java</span> <span class="token parameter variable">-jar</span> arthas-boot.jar  <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-追踪疑似慢的方法"><a href="#4-追踪疑似慢的方法" class="headerlink" title="4.追踪疑似慢的方法"></a>4.追踪疑似慢的方法</h3><p>这里追踪的时一个全局的filter方法，因为每个请求都慢所以怀疑是这里</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">trace com.xxx.BodyReaderFilter doFilter<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="5-通过curl请求该方法并查看arthas日志"><a href="#5-通过curl请求该方法并查看arthas日志" class="headerlink" title="5.通过curl请求该方法并查看arthas日志"></a>5.通过curl请求该方法并查看arthas日志</h3><p>这里找到了慢的原因是log4j打印日志的时候用了5s<br><img src="/images/arthas-sl.png" alt="日志截图"></p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>注释日志重新打包问题解决</p><h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><p>这个日志打印在其他机器上都没有出现过很慢的情况，我们模拟了和客户一样的系统环境但是均未复现，这里猜想是log4j自身缺陷或者客户服务器硬件的兼容问题，后续并没有深究具体原因。</p>]]></content>
      
      
      <categories>
          
          <category> arthas </category>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记录一下部署AWS EKS的坑</title>
      <link href="/2023/08/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E9%83%A8%E7%BD%B2AWS%20EKS%E7%9A%84%E5%9D%91/"/>
      <url>/2023/08/20/%E8%AE%B0%E5%BD%95%E4%B8%80%E4%B8%8B%E9%83%A8%E7%BD%B2AWS%20EKS%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>1.创建集群后本地aws configure和aws eks update-kubeconfig –region ## –name ##后kubectl提示需要登录没有权限，由于我的aws账号是根账号授权的sso账号，我就自己去IAM创建了一个拥有eks相关权限的账号，但是怎么都不行，后来干脆加大权限给这个账号administratorAccess权限，仍然无效，最后尝试把sso账号设置到configure中，设置后操作时提示token无效，发现了问题所在，通过环境变量的方式将KEY SECRET TOKEN写入，然后再次kubectl get nodes，问题解决，然后可以通过</p><p>eksctl create iamidentitymapping –cluster my-cluster –arn arn:aws:iam::YOUR_ACCOUNT_ID:user&#x2F;my-iam-user –group system:masters –username my-iam-user将自己在IAM新建的有eks权限的账户加入到配置组，这样IAM新建的账号就可以用key和secret配置到本地，不需要用之前的token了</p><p>2.在eks中安装kubesphere后prometheus的pvc一直pending不动，describe发现提示需要去ebs申领，然后安装了EBS的插件，然而并没有解决问题，再次查看日志发现权限不足遂针对针对<br>AmazonEKSNodeRole角色增加AmazonEBSCSIDriverPolicy权限，稍等片刻问题解决</p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
        <tags>
            
            <tag> eks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA SPI简单实现</title>
      <link href="/2023/06/25/JAVA%20SPI%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2023/06/25/JAVA%20SPI%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Java SPI（Service Provider Interface）是一种用于实现组件化、插件化和可扩展性的机制。它是Java标准库提供的一种服务发现机制，用于在运行时动态加载和实例化实现了特定接口的类。</p></blockquote><blockquote><p>Java SPI的核心概念是服务接口（Service Interface）、服务实现者（Service Provider）和服务提供者配置文件（Service Provider Configuration File）。</p></blockquote><h3 id="1-服务接口（Service-Interface）："><a href="#1-服务接口（Service-Interface）：" class="headerlink" title="1. 服务接口（Service Interface）："></a>1. 服务接口（Service Interface）：</h3><p>服务接口是定义一组抽象方法的接口，它规定了一组服务提供者需要实现的方法。服务接口通常由Java标准库或框架提供，用于描述某个功能或扩展点的抽象定义。</p><h3 id="2-服务实现者（Service-Provider）："><a href="#2-服务实现者（Service-Provider）：" class="headerlink" title="2. 服务实现者（Service Provider）："></a>2. 服务实现者（Service Provider）：</h3><p>服务实现者是指实现了服务接口的具体类。它们是提供某个功能或扩展点具体实现的组件。每个服务实现者必须提供一个无参构造函数，并实现服务接口中定义的方法。</p><h3 id="3-服务提供者配置文件（Service-Provider-Configuration-File）："><a href="#3-服务提供者配置文件（Service-Provider-Configuration-File）：" class="headerlink" title="3. 服务提供者配置文件（Service Provider Configuration File）："></a>3. 服务提供者配置文件（Service Provider Configuration File）：</h3><p>服务提供者配置文件是一种文本文件，它位于classpath的<code>META-INF/services/</code>目录下，文件名与服务接口的完全限定名相同。该文件中的每一行都包含一个服务接口的实现类的完全限定名。Java运行时环境可以通过读取这个文件来获取服务接口的实现类。</p><h2 id="Java-SPI的使用步骤如下："><a href="#Java-SPI的使用步骤如下：" class="headerlink" title="Java SPI的使用步骤如下："></a>Java SPI的使用步骤如下：</h2><h3 id="1-定义服务接口：定义一个接口来描述服务的抽象方法。"><a href="#1-定义服务接口：定义一个接口来描述服务的抽象方法。" class="headerlink" title="1. 定义服务接口：定义一个接口来描述服务的抽象方法。"></a>1. 定义服务接口：定义一个接口来描述服务的抽象方法。</h3><h3 id="2-创建服务实现者：实现服务接口，提供具体的功能或扩展点实现。"><a href="#2-创建服务实现者：实现服务接口，提供具体的功能或扩展点实现。" class="headerlink" title="2. 创建服务实现者：实现服务接口，提供具体的功能或扩展点实现。"></a>2. 创建服务实现者：实现服务接口，提供具体的功能或扩展点实现。</h3><h3 id="3-创建服务提供者配置文件：在META-INF-services-目录下创建一个以服务接口的完全限定名为命名的文件，并将每个服务实现者的完全限定名写入文件的一行。"><a href="#3-创建服务提供者配置文件：在META-INF-services-目录下创建一个以服务接口的完全限定名为命名的文件，并将每个服务实现者的完全限定名写入文件的一行。" class="headerlink" title="3. 创建服务提供者配置文件：在META-INF/services/目录下创建一个以服务接口的完全限定名为命名的文件，并将每个服务实现者的完全限定名写入文件的一行。"></a>3. 创建服务提供者配置文件：在<code>META-INF/services/</code>目录下创建一个以服务接口的完全限定名为命名的文件，并将每个服务实现者的完全限定名写入文件的一行。</h3><h3 id="4-加载服务实现者：通过Java-SPI机制，运行时环境会自动加载和实例化服务接口的实现类。"><a href="#4-加载服务实现者：通过Java-SPI机制，运行时环境会自动加载和实例化服务接口的实现类。" class="headerlink" title="4. 加载服务实现者：通过Java SPI机制，运行时环境会自动加载和实例化服务接口的实现类。"></a>4. 加载服务实现者：通过Java SPI机制，运行时环境会自动加载和实例化服务接口的实现类。</h3><p>通过Java SPI，我们可以实现组件之间的解耦和动态扩展。框架或库可以定义服务接口，而具体的实现可以由第三方开发者提供，并通过服务提供者配置文件注册到应用中。这样，在应用运行时，可以动态地发现和加载符合接口定义的实现类，从而实现灵活的插件式开发和扩展性。</p><h2 id="以下是代码的简单实现"><a href="#以下是代码的简单实现" class="headerlink" title="以下是代码的简单实现"></a>以下是代码的简单实现</h2><h3 id="定义一个消息服务接口"><a href="#定义一个消息服务接口" class="headerlink" title="定义一个消息服务接口"></a>定义一个消息服务接口</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spi</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MessageService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="定义两个实现类"><a href="#定义两个实现类" class="headerlink" title="定义两个实现类"></a>定义两个实现类</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spi</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EmailService</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 实现发送电子邮件的逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sending email: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spi</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SMSService</span> <span class="token keyword">implements</span> <span class="token class-name">MessageService</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 实现发送短信的逻辑</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sending sms: "</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="classpath下创建META-INF-services-com-test-spi-MessageService文件，其中文件名是接口类路径，内容如下"><a href="#classpath下创建META-INF-services-com-test-spi-MessageService文件，其中文件名是接口类路径，内容如下" class="headerlink" title="classpath下创建META-INF&#x2F;services&#x2F;com.test.spi.MessageService文件，其中文件名是接口类路径，内容如下"></a>classpath下创建META-INF&#x2F;services&#x2F;com.test.spi.MessageService文件，其中文件名是接口类路径，内容如下</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span>EmailService</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spi<span class="token punctuation">.</span></span>SMSService</span><span class="token comment">/*使用spi*/</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test<span class="token punctuation">.</span>spi</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ServiceLoader</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ServiceLoader</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageService</span><span class="token punctuation">></span></span> loader <span class="token operator">=</span> <span class="token class-name">ServiceLoader</span><span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token class-name">MessageService</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageService</span> service <span class="token operator">:</span> loader<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            service<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"Hello, SPI!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="得到输出内容为："><a href="#得到输出内容为：" class="headerlink" title="得到输出内容为："></a>得到输出内容为：</h3><pre class="line-numbers language-none"><code class="language-none">Sending email: Hello, SPI!Sending sms: Hello, SPI!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用k8s configmap保存nginx.conf配置文件 </title>
      <link href="/2023/05/17/%E4%BD%BF%E7%94%A8k8s%20configmap%E4%BF%9D%E5%AD%98nginx.conf%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20/"/>
      <url>/2023/05/17/%E4%BD%BF%E7%94%A8k8s%20configmap%E4%BF%9D%E5%AD%98nginx.conf%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%20/</url>
      
        <content type="html"><![CDATA[<ol><li><p>创建一个包含 Nginx 配置的文件（例如 nginx.conf）。</p></li><li><p>创建一个 ConfigMap 对象，将 Nginx 配置文件添加为其中的数据。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl create configmap nginx-config --from-file<span class="token operator">=</span>nginx.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这将创建一个名为 “nginx-config” 的 ConfigMap，并将 nginx.conf 文件的内容作为其中的数据存储。</p></li><li><p>检查 ConfigMap 是否创建成功：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">kubectl get configmap nginx-config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>确保 ConfigMap “nginx-config” 已成功创建。</p></li><li><p>在 Deployment 或 Pod 的 YAML 文件中使用 ConfigMap。</p><p>在您的 Deployment 或 Pod 的 YAML 文件中，可以通过挂载 ConfigMap 来使用保存的 Nginx 配置文件。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">apiVersion</span><span class="token punctuation">:</span> v1<span class="token key atrule">kind</span><span class="token punctuation">:</span> Pod<span class="token key atrule">metadata</span><span class="token punctuation">:</span>  <span class="token key atrule">name</span><span class="token punctuation">:</span> my<span class="token punctuation">-</span>nginx<span class="token punctuation">-</span>pod<span class="token key atrule">spec</span><span class="token punctuation">:</span>  <span class="token key atrule">containers</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>container      <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx      <span class="token key atrule">volumeMounts</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>config<span class="token punctuation">-</span>volume          <span class="token key atrule">mountPath</span><span class="token punctuation">:</span> /etc/nginx/nginx.conf          <span class="token key atrule">subPath</span><span class="token punctuation">:</span> nginx.conf  <span class="token key atrule">volumes</span><span class="token punctuation">:</span>    <span class="token punctuation">-</span> <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>config<span class="token punctuation">-</span>volume      <span class="token key atrule">configMap</span><span class="token punctuation">:</span>        <span class="token key atrule">name</span><span class="token punctuation">:</span> nginx<span class="token punctuation">-</span>config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在上述示例中，我们将 ConfigMap “nginx-config” 挂载为名为 “nginx-config-volume” 的卷，并将其挂载到容器中的 &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 路径。</p><p>根据您的实际情况，可能需要根据自己的需求和文件路径进行适当的调整。</p></li></ol><p>现在，您已经成功使用 ConfigMap 在 Kubernetes 中保存和使用 Nginx 配置文件。当需要更新配置时，只需更新 ConfigMap 中的数据即可，无需重新构建镜像。</p>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>禁用 CentOS 7 上的交换分区</title>
      <link href="/2023/05/04/%E7%A6%81%E7%94%A8%20CentOS%207%20%E4%B8%8A%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/"/>
      <url>/2023/05/04/%E7%A6%81%E7%94%A8%20CentOS%207%20%E4%B8%8A%E7%9A%84%E4%BA%A4%E6%8D%A2%E5%88%86%E5%8C%BA/</url>
      
        <content type="html"><![CDATA[<p>禁用 CentOS 7 上的交换分区可以通过以下步骤完成：</p><ol><li><p>查看当前系统上的交换分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">swapon</span> <span class="token parameter variable">--show</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>关闭所有交换分区：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> swapoff <span class="token parameter variable">-a</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>打开 <code>/etc/fstab</code> 文件，并将交换分区的行注释掉或删除：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/fstab<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在文件中找到类似以下的行：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">/dev/mapper/centos-swap swap                    swap    defaults        <span class="token number">0</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>将其注释掉或删除，保存文件并退出。</p></li><li><p>重新启动服务器以应用更改。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">reboot</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>这样就可以在 CentOS 7 上禁用交换分区了。注意，如果您的服务器内存不足，禁用交换分区可能会导致系统性能下降或崩溃。因此，在禁用交换分区之前，请确保您有足够的内存来支持您的工作负载。</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
          <category> centos7 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7修改不区分大小写功能无效</title>
      <link href="/2022/11/07/mysql5-7%E4%BF%AE%E6%94%B9%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E5%8A%9F%E8%83%BD%E6%97%A0%E6%95%88/"/>
      <url>/2022/11/07/mysql5-7%E4%BF%AE%E6%94%B9%E4%B8%8D%E5%8C%BA%E5%88%86%E5%A4%A7%E5%B0%8F%E5%86%99%E5%8A%9F%E8%83%BD%E6%97%A0%E6%95%88/</url>
      
        <content type="html"><![CDATA[<h3 id="修改my-cnf加入如下配置"><a href="#修改my-cnf加入如下配置" class="headerlink" title="修改my.cnf加入如下配置"></a>修改my.cnf加入如下配置</h3><pre class="line-numbers language-none"><code class="language-none">lower_case_table_names&#x3D;1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启服务</p><h3 id="查看修改结果"><a href="#查看修改结果" class="headerlink" title="查看修改结果"></a>查看修改结果</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">show global variables like <span class="token string">'%lower_case%'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现lower_case_table_names仍然是0</p><h3 id="修改my-cnf-文件的权限为644"><a href="#修改my-cnf-文件的权限为644" class="headerlink" title="修改my.cnf 文件的权限为644"></a>修改my.cnf 文件的权限为644</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">644</span> my.cnf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>重启服务查看结果已生效</p>]]></content>
      
      
      <categories>
          
          <category> mysql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jenkins配置github hook</title>
      <link href="/2022/07/03/jenkins%E9%85%8D%E7%BD%AEgithub%20hook/"/>
      <url>/2022/07/03/jenkins%E9%85%8D%E7%BD%AEgithub%20hook/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/1656831184349553.png" alt="githubhook.png" title="1656831184349553.png"></p><p>github webhook中可以设置secret防止第三方伪造请求，secret配合jenkins设置，首先需要到github setting中生成一个token需要权限如下，生成token后填写到secret中</p><p><img src="/images/1656831327217479.png" alt="image.png" title="1656831327217479.png"></p><p>记住token到jenkins中找到【系统配置】找到github点击【高级】，注意此处有两个高级点下面的一个</p><p><img src="/images/1656831453873295.png" alt="image.png" title="1656831453873295.png">此处的Shared secrets中添加刚刚在github中生成的token，我的配置中有两个是因为之前的token忘记了，如果有类似需求的同学也可以再加一个token</p><p><img src="/images/1656831566998283.png" alt="image.png" title="1656831566998283.png"></p><p>完成上述步骤后可push一下测试是否触发构建</p>]]></content>
      
      
      <categories>
          
          <category> CI/CD </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jenkins </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode快速生成react组件代码</title>
      <link href="/2022/06/20/vscode%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90react%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81/"/>
      <url>/2022/06/20/vscode%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90react%E7%BB%84%E4%BB%B6%E4%BB%A3%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/1655703549777512.png" alt="image.png" title="1655703549777512.png"></p><p>安装插件，输入rcc生成类组件 rfc生产函数组件</p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
          <category> vscode </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac OS常用命令</title>
      <link href="/2022/06/12/Mac%20OS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/06/12/Mac%20OS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="查询指定端口进程ID"><a href="#查询指定端口进程ID" class="headerlink" title="查询指定端口进程ID"></a>查询指定端口进程ID</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">lsof</span> <span class="token parameter variable">-i:8000</span><span class="token function">kill</span> <span class="token parameter variable">-9</span> <span class="token punctuation">[</span>进程id<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="刷新DNS"><a href="#刷新DNS" class="headerlink" title="刷新DNS"></a>刷新DNS</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">killall</span> <span class="token parameter variable">-HUP</span> mDNSResponder<span class="token function">sudo</span> <span class="token function">killall</span> mDNSResponderHelper<span class="token function">sudo</span> dscacheutil <span class="token parameter variable">-flushcache</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> MacOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>json_extract映射虚拟字段varchar类型多了双引号问题</title>
      <link href="/2022/04/24/json-extract%E6%98%A0%E5%B0%84%E8%99%9A%E6%8B%9F%E5%AD%97%E6%AE%B5varchar%E7%B1%BB%E5%9E%8B%E5%A4%9A%E4%BA%86%E5%8F%8C%E5%BC%95%E5%8F%B7%E9%97%AE%E9%A2%98/"/>
      <url>/2022/04/24/json-extract%E6%98%A0%E5%B0%84%E8%99%9A%E6%8B%9F%E5%AD%97%E6%AE%B5varchar%E7%B1%BB%E5%9E%8B%E5%A4%9A%E4%BA%86%E5%8F%8C%E5%BC%95%E5%8F%B7%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">JSON_UNQUOTE<span class="token punctuation">(</span>json_extract<span class="token punctuation">(</span>target_field<span class="token punctuation">,</span><span class="token string">'$.target_sub_field'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker常用命令</title>
      <link href="/2022/04/22/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/22/docker%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="删除所有none的镜像"><a href="#删除所有none的镜像" class="headerlink" title="删除所有none的镜像"></a>删除所有none的镜像</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> images <span class="token function">grep</span> none <span class="token function">awk</span> <span class="token string">'&#123;print $3&#125;'</span> <span class="token function">xargs</span> <span class="token function">docker</span> rmi<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="启动所有Exited的容器"><a href="#启动所有Exited的容器" class="headerlink" title="启动所有Exited的容器"></a>启动所有Exited的容器</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">ps</span> <span class="token parameter variable">-a</span>  <span class="token function">grep</span> Exited <span class="token function">awk</span> <span class="token string">'&#123;print $1&#125;'</span> <span class="token function">xargs</span> <span class="token function">docker</span> start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB常用指令</title>
      <link href="/2022/04/19/mongodb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2022/04/19/mongodb%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="MongoDB更新数据"><a href="#MongoDB更新数据" class="headerlink" title="MongoDB更新数据"></a>MongoDB更新数据</h3><pre class="line-numbers language-mongodb" data-language="mongodb"><code class="language-mongodb">db<span class="token punctuation">.</span>user_action_log<span class="token punctuation">.</span><span class="token function">updateMany</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span>       <span class="token string-property property">"isNew"</span><span class="token operator">:</span><span class="token number">1</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token punctuation">&#123;</span> <span class="token string-property property">"$set"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token string-property property">"isNew"</span><span class="token operator">:</span> <span class="token keyword">null</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="批量删除字段"><a href="#批量删除字段" class="headerlink" title="批量删除字段"></a>批量删除字段</h3><pre class="line-numbers language-mongodb" data-language="mongodb"><code class="language-mongodb">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string-property property">"target_field"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"$exists"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string-property property">"$unset"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"target_field"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property">multi</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="字段改名"><a href="#字段改名" class="headerlink" title="字段改名"></a>字段改名</h3><pre class="line-numbers language-mongodb" data-language="mongodb"><code class="language-mongodb">db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>filter<span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token property"><span class="token keyword">$rename</span></span> <span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"source_field"</span><span class="token operator">:</span><span class="token string">"target_field"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string-property property">"multi"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS箭头函数</title>
      <link href="/2022/04/19/JS%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/"/>
      <url>/2022/04/19/JS%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="ES6中的let关键字和val关键字声明变量的区别"><a href="#ES6中的let关键字和val关键字声明变量的区别" class="headerlink" title="ES6中的let关键字和val关键字声明变量的区别"></a>ES6中的let关键字和val关键字声明变量的区别</h2><p>var关键字是原生JS中声明变量的关键字，let关键字是ES6语法中新增关键字<br>let关键字声明的变量不能重复声明，var关键字可以重复声明变量<br>let关键字解析变量没有预解析，var关键字声明的变量包含预解析过程<br>let关键字提供了块级作用域，var关键字没有块级作用域，只有局部、全局作用域</p><h2 id="JavaScript中箭头函数与普通函数的区别详解"><a href="#JavaScript中箭头函数与普通函数的区别详解" class="headerlink" title="JavaScript中箭头函数与普通函数的区别详解"></a>JavaScript中箭头函数与普通函数的区别详解</h2><p>箭头函数：</p><pre class="line-numbers language-none"><code class="language-none">let fun &#x3D; () &#x3D;&gt; &#123;    console.log(&#39;lalalala&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>普通函数：</p><pre class="line-numbers language-none"><code class="language-none">function fun() &#123;    console.log(&#39;lalla&#39;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>箭头函数相当于匿名函数，并且简化了函数定义。箭头函数有两种格式，一种只包含一个表达式，连{ … }和return都省略掉了。还有一种可以包含多条语句，这时候就不能省略{ … }和return。</p><p><strong>箭头函数是匿名函数，不能作为构造函数，不能使用new</strong></p><p><strong>箭头函数不绑定arguments，取而代之用rest参数…解决</strong></p><pre class="line-numbers language-none"><code class="language-none">function A(a)&#123;  console.log(arguments);&#125;A(1,2,3,4,5,8);  &#x2F;&#x2F;  [1, 2, 3, 4, 5, 8, callee: ƒ, Symbol(Symbol.iterator): ƒ]let B &#x3D; (b)&#x3D;&gt;&#123;  console.log(arguments);&#125;B(2,92,32,32);   &#x2F;&#x2F; Uncaught ReferenceError: arguments is not definedlet C &#x3D; (...c) &#x3D;&gt; &#123;  console.log(c);&#125;C(3,82,32,11323);  &#x2F;&#x2F; [3, 82, 32, 11323]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>箭头函数不绑定this，会捕获其所在的上下文的this值，作为自己的this值</strong></p><pre class="line-numbers language-none"><code class="language-none">var obj &#x3D; &#123;  a: 10,  b: () &#x3D;&gt; &#123;    console.log(this.a); &#x2F;&#x2F; undefined    console.log(this); &#x2F;&#x2F; Window &#123;postMessage: ƒ, blur: ƒ, focus: ƒ, close: ƒ, frames: Window, …&#125;  &#125;,  c: function() &#123;    console.log(this.a); &#x2F;&#x2F; 10    console.log(this); &#x2F;&#x2F; &#123;a: 10, b: ƒ, c: ƒ&#125;  &#125;&#125;obj.b(); obj.c();var obj &#x3D; &#123;  a: 10,  b: function()&#123;    console.log(this.a); &#x2F;&#x2F;10  &#125;,  c: function() &#123;     return ()&#x3D;&gt;&#123;           console.log(this.a); &#x2F;&#x2F;10     &#125;  &#125;&#125;obj.b(); obj.c()();<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数通过<strong>call()<strong>或</strong>apply()<strong>方法调用一个函数时，只传入了一个参数，对</strong>this</strong>并没有影响。</p><pre class="line-numbers language-none"><code class="language-none">let obj2 &#x3D; &#123;    a: 10,    b: function(n) &#123;        let f &#x3D; (n) &#x3D;&gt; n + this.a;        return f(n);    &#125;,    c: function(n) &#123;        let f &#x3D; (n) &#x3D;&gt; n + this.a;        let m &#x3D; &#123;            a: 20        &#125;;        return f.call(m,n);    &#125;&#125;;console.log(obj2.b(1));  &#x2F;&#x2F; 11console.log(obj2.c(1)); &#x2F;&#x2F; 11<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>箭头函数没有原型属性</p><pre class="line-numbers language-none"><code class="language-none">var a &#x3D; ()&#x3D;&gt;&#123;  return 1;&#125; function b()&#123;  return 2;&#125; console.log(a.prototype);  &#x2F;&#x2F; undefinedconsole.log(b.prototype);   &#x2F;&#x2F; &#123;constructor: ƒ&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> js </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>inherit、table-layout一些理解</title>
      <link href="/2022/04/19/inherit%E3%80%81table-layout%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/"/>
      <url>/2022/04/19/inherit%E3%80%81table-layout%E4%B8%80%E4%BA%9B%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="inherit-属性"><a href="#inherit-属性" class="headerlink" title="inherit 属性"></a>inherit 属性</h2><p>在CSS中，子元素会继承了父元素的一些样式属性。能够继承到子类的样式属性非常有限，仅是<code>文字、字体</code>、<code>颜色</code>… 子类如果还想继承父类的属性，可以通过<code>inherit</code>强制继承。</p><h2 id="table-layout"><a href="#table-layout" class="headerlink" title="table-layout"></a>table-layout</h2><h4 id="定义和用法"><a href="#定义和用法" class="headerlink" title="定义和用法"></a>定义和用法</h4><p>tableLayout 属性用来显示表格单元格、行、列的算法规则。</p><h4 id="固定表格布局："><a href="#固定表格布局：" class="headerlink" title="固定表格布局："></a>固定表格布局：</h4><p>固定表格布局与自动表格布局相比，允许浏览器更快地对表格进行布局。</p><p>在固定表格布局中，水平布局仅取决于表格宽度、列宽度、表格边框宽度、单元格间距，而与单元格的内容无关。</p><p>通过使用固定表格布局，用户代理在接收到第一行后就可以显示表格。</p><h4 id="自动表格布局："><a href="#自动表格布局：" class="headerlink" title="自动表格布局："></a>自动表格布局：</h4><p>在自动表格布局中，列的宽度是由列单元格中没有折行的最宽的内容设定的。</p><p>此算法有时会较慢，这是由于它需要在确定最终的布局之前访问表格中所有的内容。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue面试题</title>
      <link href="/2022/04/19/vue%E9%9D%A2%E8%AF%95/"/>
      <url>/2022/04/19/vue%E9%9D%A2%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="vue中created与mounted区别"><a href="#vue中created与mounted区别" class="headerlink" title="vue中created与mounted区别"></a>vue中created与mounted区别</h2><p>在created阶段，实例已经被初始化，但是还没有挂载至el上，所以我们无法获取到对应的节点，但是此时我们是可以获取到vue中data与methods中的数据的；<br>在mounted阶段，vue的template成功挂载在$el中，此时一个完整的页面已经能够显示在浏览器中，所以在这个阶段，可以调用节点了；</p><h2 id="nextTick的理解"><a href="#nextTick的理解" class="headerlink" title="$nextTick的理解"></a>$nextTick的理解</h2><p>用法：<br>在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。<br>为什么？<br>Vue 实现响应式并不是数据发生变化之后 DOM 立即变化，而是按一定的策略进行 DOM 的更新。Vue 在更新 DOM 时是异步执行的。只要侦听到数据变化，Vue 将开启一个队列，并缓冲在同一事件循环中发生的所有数据变更。如果同一个 watcher 被多次触发，只会被推入到队列中一次。这种在缓冲时去除重复数据对于避免不必要的计算和 DOM 操作是非常重要的。然后，在下一个的事件循环“tick”中，Vue 刷新队列并执行实际 (已去重的) 工作。<br>所以为了在数据变化之后等待 Vue 完成更新 DOM，可以在数据变化之后立即使用 Vue.nextTick(callback)。这样回调函数将在 DOM 更新完成后被调用。<br>使用场景<br>在你更新完数据后，需要及时操作渲染好的 DOM时</p><h2 id="vm-set-obj-key-val-做了什么？"><a href="#vm-set-obj-key-val-做了什么？" class="headerlink" title="vm.$set(obj, key, val) 做了什么？"></a>vm.$set(obj, key, val) 做了什么？</h2><p>由于 Vue 无法探测对象新增属性或者通过索引为数组新增一个元素，所以这才有了 vm.s e t ， 它 是 V u e . s e t 的 别 名 。 v m . set，它是 Vue.set 的别名。 vm.set，它是Vue.set的别名。vm.set 用于向响应式对象添加一个新的 property，并确保这个新的 property 同样是响应式的，并触发视图更新。</p><p>为对象添加一个新的响应式数据：调用 defineReactive 方法为对象增加响应式数据，然后执行 dep.notify 进行依赖通知，更新视图<br>为数组添加一个新的响应式数据：通过 splice 方法实现</p><h2 id="vue的自定义指令"><a href="#vue的自定义指令" class="headerlink" title="vue的自定义指令"></a>vue的自定义指令</h2><p>Vue除了核心功能默认内置的指令 ，Vue 也允许注册自定义指令。<br>自定义指令是用来操作DOM的。尽管Vue推崇数据驱动视图的理念，但并非所有情况都适合数据驱动。自定义指令就是一种有效的补充和扩展，不仅可用于定义任何的DOM操作，并且是可复用的。</p><p>添加自定义指令的两种方式：</p><p>全局指令： 通过 Vue.directive() 函数注册一个全局的指令。<br>局部指令：通过组件的 directives 属性，对该组件添加一个局部的指令。</p><h2 id="vue的生命周期的理解"><a href="#vue的生命周期的理解" class="headerlink" title="vue的生命周期的理解"></a>vue的生命周期的理解</h2><p>beforecreate （初始化界面前）<br>created （初始化界面后）<br>beforemount （渲染界面前）<br>mounted （渲染界面后）<br>beforeUpdate （更新数据前）<br>updated （更新数据后）<br>beforedestory （卸载组件前）<br>destroyed （卸载组件后）</p><h2 id="Vue组件通信有哪些方式"><a href="#Vue组件通信有哪些方式" class="headerlink" title="Vue组件通信有哪些方式"></a>Vue组件通信有哪些方式</h2><p>1.父传子：props<br>父组件通过 props 向下传递数据给子组件。注：组件中的数据共有三种形式：data、props、computed</p><p>2.父传子孙：provide 和 inject<br>父组件定义provide方法return需要分享给子孙组件的属性，子孙组件使用 inject 选项来接收指定的我们想要添加在这个实例上的 属性；</p><p>3.子传父：通过事件形式<br>子组件通过 $emit()给父组件发送消息，父组件通过v-on绑定事件接收数据。</p><p>4.父子、兄弟、跨级：eventBus.js<br>这种方法通过一个空的 Vue 实例作为中央事件总线（事件中心）,用它来（e m i t ） 触 发 事 件 和 （ emit）触发事件和（emit）触发事件和（on）监听事件，巧妙而轻量地实现了任何组件间的通信。</p><p>5.通信插件：PubSub.js</p><p>6.vuex<br>vuex 是 vue 的状态管理器，存储的数据是响应式的。只需要把共享的值放到vuex中，其他需要的组件直接获取使用即可；</p><h2 id="router和route的区别"><a href="#router和route的区别" class="headerlink" title="router和route的区别"></a>router和route的区别</h2><p>router为VueRouter的实例，相当于一个全局的路由器对象，里面含有很多属性和子对象，例如history对象。。。经常用的跳转链接就可以用this.$router.push，和router-link跳转一样。</p><p>route相当于当前正在跳转的路由对象。。可以从里面获取name,path,params,query等</p><h2 id="vue-router有几种钩子函数？"><a href="#vue-router有几种钩子函数？" class="headerlink" title="vue-router有几种钩子函数？"></a>vue-router有几种钩子函数？</h2><p>1.全局路由<br>全局导航钩子主要有两种钩子：前置守卫(beforeEach)、后置钩子(afterEach)<br>2. 路由独享的钩子<br>单个路由独享的导航钩子，它是在路由配置上直接进行定义的</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">routes</span><span class="token operator">:</span> <span class="token punctuation">[</span>         <span class="token punctuation">&#123;</span>            <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">'/file'</span><span class="token punctuation">,</span>            <span class="token literal-property property">component</span><span class="token operator">:</span> File<span class="token punctuation">,</span>            <span class="token function-variable function">beforeEnter</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">to<span class="token punctuation">,</span> from <span class="token punctuation">,</span>next</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>              <span class="token comment">//do something</span>            <span class="token punctuation">&#125;</span>         <span class="token punctuation">&#125;</span>        <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="vue-router路由跳转方式"><a href="#vue-router路由跳转方式" class="headerlink" title="vue-router路由跳转方式"></a>vue-router路由跳转方式</h2><p>声明式（标签跳转）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;name:'home'&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>&#123;path:'/home'&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>编程式（ js跳转）</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">'/home'</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">'home'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">this</span><span class="token punctuation">.</span>$router<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">'/home'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="keep-alive"><a href="#keep-alive" class="headerlink" title="keep-alive"></a>keep-alive</h2><p>&lt; keep-alive &gt;是Vue的内置组件，能在组件切换过程中将状态保留在内存中，防止重复渲染DOM。</p><p>&lt; keep-alive &gt; 包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们。</p><h2 id="Vuex是什么？怎么使用？"><a href="#Vuex是什么？怎么使用？" class="headerlink" title="Vuex是什么？怎么使用？"></a>Vuex是什么？怎么使用？</h2><p>Vuex是实现组件全局状态（数据）管理的一种机制，可以方便实现组件数据之间的共享；Vuex集中管理共享的数据，易于开发和后期维护；能够高效的实现组件之间的数据共享，提高开发效率；存储在Vuex的数据是响应式的，能够实时保持页面和数据的同步；<br>Vuex重要核心属性包括：state,mutations,action,getters,modules.</p><p>state<br>Vuex 使用单一状态树,即每个应用将仅仅包含一个store 实例，但单一状态树和模块化并不冲突。存放的数据状态，不可以直接修改里面的数据。</p><p>mutations<br>mutations定义的方法动态修改Vuex 的 store 中的状态或数据。</p><p>action<br>actions可以理解为通过将mutations里面处里数据的方法变成可异步的处理数据的方法，简单的说就是异步操作数据。view 层通过 store.dispath 来分发 action。</p><p>getters<br>类似vue的计算属性，主要用来过滤一些数据。</p><p>modules<br>项目特别复杂的时候，可以让每一个模块拥有自己的state、mutation、action、getters,使得结构非常清晰，方便管理。</p><h2 id="什么情况下使用-Vuex？"><a href="#什么情况下使用-Vuex？" class="headerlink" title="什么情况下使用 Vuex？"></a>什么情况下使用 Vuex？</h2><p>如果应用够简单，最好不要使用 Vuex，一个简单的 store 模式即可；<br>需要构建一个中大型单页应用时，使用Vuex能更好地在组件外部管理状态；</p><h2 id="Vuex和单纯的全局对象有什么区别？"><a href="#Vuex和单纯的全局对象有什么区别？" class="headerlink" title="Vuex和单纯的全局对象有什么区别？"></a>Vuex和单纯的全局对象有什么区别？</h2><p>Vuex 的状态存储是响应式的。当 Vue 组件从 store 中读取状态的时候，若 store 中的状态发生变化，那么相应的组件也会相应地得到高效更新。<br>不能直接改变 store 中的状态。改变 store 中的状态的唯一途径就是显式地提交 (commit) mutation。这样使得我们可以方便地跟踪每一个状态的变化，从而让我们能够实现一些工具帮助我们更好地了解我们的应用。</p><h2 id="为什么-Vuex-的-mutation-中不能做异步操作？"><a href="#为什么-Vuex-的-mutation-中不能做异步操作？" class="headerlink" title="为什么 Vuex 的 mutation 中不能做异步操作？"></a>为什么 Vuex 的 mutation 中不能做异步操作？</h2><p>每个mutation执行完成后都会对应到一个新的状态变更，这样devtools就可以打个快照存下来，然后就可以实现 time-travel 了。如果mutation支持异步操作，就没有办法知道状态是何时更新的，无法很好的进行状态的追踪，给调试带来困难。</p><h2 id="SSR有了解吗，它主要解决什么问题？"><a href="#SSR有了解吗，它主要解决什么问题？" class="headerlink" title="SSR有了解吗，它主要解决什么问题？"></a>SSR有了解吗，它主要解决什么问题？</h2><p>解决了以下两个问题：</p><p>seo：搜索引擎优先爬取页面HTML结构，使用ssr时，服务端已经生成了和业务想关联的HTML，有利于seo<br>首屏呈现渲染：用户无需等待页面所有js加载完成就可以看到页面视图（压力来到了服务器，所以需要权衡哪些用服务端渲染，哪些交给客户端）<br>缺点</p><p>复杂度：整个项目的复杂度<br>性能会受到影响<br>服务器负载变大，相对于前后端分离务器只需要提供静态资源来说，服务器负载更大，所以要慎重使用</p><h2 id="做过哪些Vue的性能优化？"><a href="#做过哪些Vue的性能优化？" class="headerlink" title="做过哪些Vue的性能优化？"></a>做过哪些Vue的性能优化？</h2><p>编码阶段</p><p>尽量减少data中的数据，data中的数据都会增加getter和setter，会收集对应的watcher<br>v-if和v-for不能连用<br>如果需要使用v-for给每项元素绑定事件时使用事件代理<br>SPA 页面采用keep-alive缓存组件<br>在更多的情况下，使用v-if替代v-show<br>key保证唯一<br>使用路由懒加载、异步组件<br>防抖、节流<br>第三方模块按需导入<br>长列表滚动到可视区域动态加载<br>图片懒加载<br>SEO优化</p><p>服务端渲染SSR<br>预渲染<br>打包优化</p><p>压缩代码<br>Tree Shaking&#x2F;Scope Hoisting<br>使用cdn加载第三方模块<br>多线程打包happypack<br>splitChunks抽离公共文件<br>sourceMap优化</p>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx部署vue刷新页面404</title>
      <link href="/2021/11/19/nginx%E9%83%A8%E7%BD%B2vue%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2404/"/>
      <url>/2021/11/19/nginx%E9%83%A8%E7%BD%B2vue%E5%88%B7%E6%96%B0%E9%A1%B5%E9%9D%A2404/</url>
      
        <content type="html"><![CDATA[<p>location中增加一下内容</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token directive"><span class="token keyword">location</span> /</span> <span class="token punctuation">&#123;</span>  <span class="token directive"><span class="token keyword">try_files</span> <span class="token variable">$uri</span> <span class="token variable">$uri</span>/ /index.html</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Nginx </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux常用命令</title>
      <link href="/2021/11/12/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
      <url>/2021/11/12/linux%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="linux查看当前目录下文件大小"><a href="#linux查看当前目录下文件大小" class="headerlink" title="linux查看当前目录下文件大小"></a>linux查看当前目录下文件大小</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">du</span> <span class="token parameter variable">-sh</span> <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>AWS ECS 实例unregister（取消注册）后如何找回</title>
      <link href="/2021/10/19/aws-ecs-%E5%AE%9E%E4%BE%8Bunregister%EF%BC%88%E5%8F%96%E6%B6%88%E6%B3%A8%E5%86%8C%EF%BC%89%E5%90%8E%E5%A6%82%E4%BD%95%E6%89%BE%E5%9B%9E/"/>
      <url>/2021/10/19/aws-ecs-%E5%AE%9E%E4%BE%8Bunregister%EF%BC%88%E5%8F%96%E6%B6%88%E6%B3%A8%E5%86%8C%EF%BC%89%E5%90%8E%E5%A6%82%E4%BD%95%E6%89%BE%E5%9B%9E/</url>
      
        <content type="html"><![CDATA[<p><a href="https://img2020.cnblogs.com/blog/2461022/202110/2461022-20211019215824757-1373482160.png"></a><img src="/images/1636349136190796.png" alt="a.png" title="1636349136190796.png"> </p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>如果不小心取消注册（点击了上图按钮）会导致ecs中的任务无法和ec2实例关联也无法通过aws-cli执行发布部署</p><h3 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h3><p>aws ecs是通过amazon-ecs-agent容器管理ecs的，遂从此入手查阅文档，文档截图如下，虽然文档描述的agent虽然是通过服务启动的但是不影响我们对问题的理解，观察到ec2实例中的agent在疯狂重启，猜想问题出在agent.db</p><p><img src="/images/1636349170925095.png" alt="b.png" title="1636349170925095.png"></p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><ol><li><p>重启ec2实例（在没找到解决方案之前我已经重启过了，想着是不是万能重启大法就可以，然并卵，之所以写重启是因为我觉得重启会触发agent镜像重启然后取创建agent.db）</p></li><li><p>cd &#x2F;var&#x2F;lib&#x2F;ecs&#x2F;data</p></li><li><p>mv agent.db agent.db.bk</p></li></ol><p>之后回到aws控制台刷新等待实例+1，如下图ECS实例又回来了</p><p><img src="/images/1636349210483616.png" alt="c.png" title="1636349210483616.png"></p>]]></content>
      
      
      <categories>
          
          <category> aws </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ES常用查询</title>
      <link href="/2021/10/11/ES%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/"/>
      <url>/2021/10/11/ES%E5%B8%B8%E7%94%A8%E6%9F%A5%E8%AF%A2/</url>
      
        <content type="html"><![CDATA[<h3 id="ES查询ID在某个区间内"><a href="#ES查询ID在某个区间内" class="headerlink" title="ES查询ID在某个区间内"></a>ES查询ID在某个区间内</h3><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>    <span class="token property">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token property">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token property">"must"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"match_all"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token property">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token property">"range"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                    <span class="token property">"id"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                        <span class="token property">"gte"</span><span class="token operator">:</span> <span class="token number">90000</span><span class="token punctuation">,</span>                        <span class="token property">"lte"</span><span class="token operator">:</span> <span class="token number">30000</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ES解除readonly状态"><a href="#ES解除readonly状态" class="headerlink" title="ES解除readonly状态"></a>ES解除readonly状态</h3><pre class="line-numbers language-none"><code class="language-none">curl -X PUT &quot;localhost:9200&#x2F;_settings&quot; -H &#39;Content-Type: application&#x2F;json&#39; -d &#39;&#123;  &quot;index.blocks.read_only_allow_delete&quot;: null&#125;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> elasticsearch </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA语法糖之Lambda表达式、方法引用（Method References）</title>
      <link href="/2021/10/11/java%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%88method-references%EF%BC%89/"/>
      <url>/2021/10/11/java%E8%AF%AD%E6%B3%95%E7%B3%96%E4%B9%8Blambda%E8%A1%A8%E8%BE%BE%E5%BC%8F%E3%80%81%E6%96%B9%E6%B3%95%E5%BC%95%E7%94%A8%EF%BC%88method-references%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h4 id="Lambda表达式官方描述："><a href="#Lambda表达式官方描述：" class="headerlink" title="Lambda表达式官方描述："></a>Lambda表达式官方描述：</h4><p>One issue with anonymous classes is that if the implementation of your anonymous class is very simple, such as an interface that contains only one method, then the syntax of anonymous classes may seem unwieldy and unclear. In these cases, you’re usually trying to pass functionality as an argument to another method, such as what action should be taken when someone clicks a button. Lambda expressions enable you to do this, to treat functionality as method argument, or code as data.</p><h4 id="中文释义："><a href="#中文释义：" class="headerlink" title="中文释义："></a>中文释义：</h4><p>匿名类的一个问题是，如果匿名类的实现非常简单，例如只包含一个方法的接口，那么匿名类的语法可能会显得笨拙和不清楚。 在这些情况下，您通常会尝试将功能作为参数传递给另一个方法，例如当有人单击按钮时应该采取什么操作。 Lambda 表达式使您能够做到这一点，将功能视为方法参数，或将代码视为数据。 _个人理解：是针对只有一个方法的匿名类的一个简化语法糖，_（jdk1.8新增了一个FunctionalInterface注解，被这个注解注释的接口被称为functional interface 这种接口的实现都可以用lambda表达式）</p><h4 id="Lambda表达式语法："><a href="#Lambda表达式语法：" class="headerlink" title="Lambda表达式语法："></a>Lambda表达式语法：</h4><p>一个 lambda 表达式包含以下内容： 括号中以逗号分隔的形式参数列表。 CheckPerson.test 方法包含一个参数 p，它表示 Person 类的一个实例。 <strong>注意：您可以省略 lambda 表达式中参数的数据类型。 另外，如果只有一个参数，可以省略括号。 例如，以下 lambda 表达式也是有效的：</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Person<span class="token punctuation">.</span>Sex</span><span class="token punctuation">.</span><span class="token constant">MALE</span>     <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">18</span>    <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>箭头标记写法，-&gt; 主体，由单个表达式或语句块组成。 此示例使用以下表达式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Person<span class="token punctuation">.</span>Sex</span><span class="token punctuation">.</span><span class="token constant">MALE</span>     <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">18</span>    <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果指定单个表达式，则 Java 运行时会计算该表达式，然后返回其值。 或者，您可以使用 return 语句：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">p <span class="token operator">-></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Person<span class="token punctuation">.</span>Sex</span><span class="token punctuation">.</span><span class="token constant">MALE</span>        <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">18</span>        <span class="token operator">&amp;&amp;</span> p<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>return 语句不是表达式； 在 lambda 表达式中，您必须将语句括在大括号 ({}) 中。 但是，您不必将 void 方法调用括在大括号中。 例如，以下是一个有效的 lambda 表达式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">email <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>email<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，一个 lambda 表达式看起来很像一个方法声明； 您可以将 lambda 表达式视为匿名方法——没有名称的方法。 以下示例 Calculator 是采用多个形参的 lambda 表达式示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">interface</span> <span class="token class-name">IntegerMath</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> <span class="token function">operation</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>      <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">operateBinary</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token class-name">IntegerMath</span> op<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> op<span class="token punctuation">.</span><span class="token function">operation</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Calculator</span> myApp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Calculator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">IntegerMath</span> addition <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>        <span class="token class-name">IntegerMath</span> subtraction <span class="token operator">=</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"40 + 2 = "</span> <span class="token operator">+</span>            myApp<span class="token punctuation">.</span><span class="token function">operateBinary</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> addition<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"20 - 10 = "</span> <span class="token operator">+</span>            myApp<span class="token punctuation">.</span><span class="token function">operateBinary</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> subtraction<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法operateBinary 对两个整数操作数执行数学运算。 操作本身由 IntegerMath 的实例指定。 该示例使用 lambda 表达式定义了两个运算，即加法和减法。 该示例打印以下内容：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">40</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token number">20</span> <span class="token operator">-</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Method-References（这种双冒号-写法）"><a href="#Method-References（这种双冒号-写法）" class="headerlink" title="Method References（这种双冒号::写法）"></a><em>Method References（这种双冒号::写法）</em></h4><p>您可以使用 lambda 表达式来创建匿名方法。 然而，有时 lambda 表达式除了调用现有方法之外什么都不做。 在这些情况下，按名称引用现有方法通常会更清楚。 方法引用（Method references）使您能够做到这一点； 它们是用于已具有名称的方法的紧凑、易于阅读的 lambda 表达式。 再次考虑 Lambda 表达式部分中讨论的 Person 类：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>        <span class="token class-name">LocalDate</span> birthday<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">compareByAge</span><span class="token punctuation">(</span><span class="token class-name">Person</span> a<span class="token punctuation">,</span> <span class="token class-name">Person</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span>birthday<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设您的社交网络应用程序的成员包含在一个数组中，并且您希望按年龄对数组进行排序。 您可以使用以下代码：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token punctuation">]</span> rosterAsArray <span class="token operator">=</span> roster<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span>roster<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">PersonAgeComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Person</span> a<span class="token punctuation">,</span> <span class="token class-name">Person</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>rosterAsArray<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PersonAgeComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此排序调用的方法签名如下：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">void</span> <span class="token function">sort</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">[</span><span class="token punctuation">]</span> a<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">></span></span> c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>请注意，接口 Comparator 是一个功能接口（functional interface）。 因此，您可以使用 lambda 表达式而不是定义然后创建实现 Comparator 的类的新实例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>rosterAsArray<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token class-name">Person</span> a<span class="token punctuation">,</span> <span class="token class-name">Person</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getBirthday</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>但是，这种比较两个 Person 实例的出生日期的方法已经作为 Person.compareByAge 存在。 您可以在 lambda 表达式的主体中调用此方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>rosterAsArray<span class="token punctuation">,</span>    <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token function">compareByAge</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>由于此 lambda 表达式调用现有方法，因此您可以使用方法引用（Method references）而不是 lambda 表达式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>rosterAsArray<span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">compareByAge</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>方法引用 Person::compareByAge 在语义上与 lambda 表达式 (a, b) -&gt; Person.compareByAge(a, b) 相同。 每个都有以下特点： 它的形参列表是从 Comparator<Person>.compare 复制过来的，即 (Person, Person)。 它的主体调用方法 Person.compareByAge。 附官方文档链接： <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html">https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html</a> <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html">https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html</a></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu挂载Apfs文件系统磁盘（OSX分区）</title>
      <link href="/2021/10/11/ubuntu%E6%8C%82%E8%BD%BDapfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A3%81%E7%9B%98%EF%BC%88osx%E5%88%86%E5%8C%BA%EF%BC%89/"/>
      <url>/2021/10/11/ubuntu%E6%8C%82%E8%BD%BDapfs%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F%E7%A3%81%E7%9B%98%EF%BC%88osx%E5%88%86%E5%8C%BA%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="去git下载文件系统源码并编译"><a href="#去git下载文件系统源码并编译" class="headerlink" title="去git下载文件系统源码并编译"></a>去git下载文件系统源码并编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/sgan81/apfs-fuse.git<span class="token builtin class-name">cd</span> apfs-fuse/ <span class="token function">git</span> submodule init<span class="token function">git</span> submodule update <span class="token function">mkdir</span> build<span class="token builtin class-name">cd</span> build/ cmake <span class="token punctuation">..</span> <span class="token function">make</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译过程中会出现各种缺少头文件情况（缺少其他依赖的库），列出本人缺少的库，本人是ubuntu20-04"><a href="#编译过程中会出现各种缺少头文件情况（缺少其他依赖的库），列出本人缺少的库，本人是ubuntu20-04" class="headerlink" title="编译过程中会出现各种缺少头文件情况（缺少其他依赖的库），列出本人缺少的库，本人是ubuntu20.04"></a>编译过程中会出现各种缺少头文件情况（缺少其他依赖的库），列出本人缺少的库，本人是ubuntu20.04</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> zlib1g-dev <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libboost-all-dev <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libbz2-dev <span class="token function">sudo</span> <span class="token function">apt</span> <span class="token function">install</span> libfuse3-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="编译成功后复制编译后文件"><a href="#编译成功后复制编译后文件" class="headerlink" title="编译成功后复制编译后文件"></a>编译成功后复制编译后文件</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> apfs-<span class="token punctuation">\</span>* /usr/local/bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="然后就可以挂载磁盘"><a href="#然后就可以挂载磁盘" class="headerlink" title="然后就可以挂载磁盘"></a>然后就可以挂载磁盘</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> apfs-fuse <span class="token parameter variable">-o</span> allow<span class="token punctuation">\</span>_other /dev/sda /mnt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>注：磁盘设备路径需要自己根据自己的替换，不知道的可以用fdisk -l查看，没有fdisk自行安装</p>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS五种方式实现 Footer 置底（转载）</title>
      <link href="/2021/10/11/css%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0-footer-%E7%BD%AE%E5%BA%95%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/"/>
      <url>/2021/10/11/css%E4%BA%94%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0-footer-%E7%BD%AE%E5%BA%95%EF%BC%88%E8%BD%AC%E8%BD%BD%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>页脚置底（Sticky footer）就是让网页的footer部分始终在浏览器窗口的底部。当网页内容足够长以至超出浏览器可视高度时，页脚会随着内容被推到网页底部；但如果网页内容不够长，置底的页脚就会保持在浏览器窗口底部。</p><p><img src="/images/5e702df196feb.jpg"></p><h3 id="1、将内容部分的底部外边距设为负数"><a href="#1、将内容部分的底部外边距设为负数" class="headerlink" title="1、将内容部分的底部外边距设为负数"></a>1、将内容部分的底部外边距设为负数</h3><p>这是个比较主流的用法，把内容部分最小高度设为100%，再利用内容部分的负底部外边距值来达到当高度不满时，页脚保持在窗口底部，当高度超出则随之推出的效果。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>   content  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>push<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html, body</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.wrapper</span> <span class="token punctuation">&#123;</span> <span class="token property">min-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token comment">/* 等于footer的高度 */</span> <span class="token property">margin-bottom</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer,.push</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个方法需要容器里有额外的占位元素（如.push）</p><p>需要注意的是.wrapper的margin-bottom值需要和.footer的负的height值保持一致，这一点不太友好。</p><h3 id="2、将页脚的顶部外边距设为负数"><a href="#2、将页脚的顶部外边距设为负数" class="headerlink" title="2、将页脚的顶部外边距设为负数"></a>2、将页脚的顶部外边距设为负数</h3><p>既然能在容器上使用负的margin bottom，那能否使用负margin top吗？当然可以。</p><p>给内容外增加父元素，并让内容部分的底部内边距与页脚高度的值相等。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> &lt;divclass="content">&lt;divclass="content-inside">   content  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> &lt;footerclass="footer"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html, body</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span> <span class="token punctuation">&#123;</span> <span class="token property">min-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content-inside</span> <span class="token punctuation">&#123;</span> <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span> <span class="token property">padding-bottom</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span> <span class="token property">margin-top</span><span class="token punctuation">:</span> -50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不过这种方法和上一种一样，都需要额外添加不必要的html元素。</p><h3 id="3、使用calc-设置内容高度"><a href="#3、使用calc-设置内容高度" class="headerlink" title="3、使用calc()设置内容高度"></a>3、使用calc()设置内容高度</h3><p>有一种方法不需要任何多余元素——使用CSS3新增的计算函数calc()</p><p>这样元素间就不会有重叠发生，也不需要控制内外边距了～</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> &lt;divclass="content">  content <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> &lt;footerclass="footer"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">.content</span> <span class="token punctuation">&#123;</span> <span class="token property">min-height</span><span class="token punctuation">:</span> <span class="token function">calc</span><span class="token punctuation">(</span>100vh - 70px<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可能你会疑惑内容高度calc()中为什么减去70px，而不是footer的高度50px，因为假设俩元素有20px的间距，所以70px&#x3D;50px+20px</p><p>不过，你不必在意这些~</p><h3 id="4、使用flexbox弹性盒布局"><a href="#4、使用flexbox弹性盒布局" class="headerlink" title="4、使用flexbox弹性盒布局"></a>4、使用flexbox弹性盒布局</h3><p>以上三种方法的footer高度都是固定的，通常来说这不利于网页布局：内容会改变，它们都是弹性的，一旦内容超出固定高度就会破坏布局。所以给footer使用flexbox吧，让它的高度可以变大变小变漂亮~（≧∇≦）</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  content <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">min-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span> <span class="token property">flex-direction</span><span class="token punctuation">:</span> column<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.content</span> <span class="token punctuation">&#123;</span> <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你还可以在上面添加header或在下面添加更多元素。可从以下技巧选择其一：</p><p>flex ： 1 使内容（如：.content）高度可以自由伸缩 margin-top： auto</p><h3 id="5、使用Grid网格布局"><a href="#5、使用Grid网格布局" class="headerlink" title="5、使用Grid网格布局"></a>5、使用Grid网格布局</h3><p>grid比flexbox还要新很多，并且更佳很简洁</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  content <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>footer</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>footer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>footer</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">html</span> <span class="token punctuation">&#123;</span> <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">body</span> <span class="token punctuation">&#123;</span> <span class="token property">min-height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> grid<span class="token punctuation">;</span> <span class="token property">grid-template-rows</span><span class="token punctuation">:</span> 1fr auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.footer</span> <span class="token punctuation">&#123;</span> <span class="token property">grid-row-start</span><span class="token punctuation">:</span> 2<span class="token punctuation">;</span> <span class="token property">grid-row-end</span><span class="token punctuation">:</span> 3<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遗憾的是，网格布局（Grid layout）目前仅支持Chrome Canary和Firefox Developer Edition版本。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实页脚置底的布局随处可见，很多人也和我一样觉得比较简单，但可能只知其然罢了，偶然看到CSS-TRICKS上介绍页脚置底的文章觉得不错，遂译之。</p><p>转载自<a href="https://www.cnblogs.com/ypppt/p/12868405.html">https://www.cnblogs.com/ypppt/p/12868405.html</a></p>]]></content>
      
      
      <categories>
          
          <category> css </category>
          
          <category> 转载 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> footer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA几种方式实现深拷贝</title>
      <link href="/2021/10/11/java%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D/"/>
      <url>/2021/10/11/java%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0%E6%B7%B1%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><p>定义两个类用于测试拷贝，类内容如下，目的是深拷贝一个User类的对象：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> category<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Car</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token punctuation">.</span></span><span class="token class-name">JsonProcessingException</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>databind<span class="token punctuation">.</span></span><span class="token class-name">ObjectMapper</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span>experimental<span class="token punctuation">.</span></span><span class="token class-name">Accessors</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@Accessors</span><span class="token punctuation">(</span>chain <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">,</span> <span class="token class-name">Serializable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Integer</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Car</span> car<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> category<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 方法一：最原始的实现方式，通过构造方法手创建     * 优点：     * 1.实现简单直观     * 2.不需要依赖额外的接口和第三方包     * 缺点：     * 1.成员变量发生变动需要修改方法，不满足开闭原则；     * 2.不具有可复用性；     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">copyUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> copyUser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCategory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            copyUser<span class="token punctuation">.</span><span class="token function">setCar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                    <span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> copyUser<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 方法二：使用Object的clone方法实现     * 优点：     * 1.较方式1实现更简单，不需要关注copy细节；     * 2.不需要依赖第三方包；     * 3.不修改引用类型成员变量不需要修改代码     * 缺点：     * 1.需要实现Cloneable，重写父类clone方法，不满足里式替换；     * 2.且引用类型成员变量发生变动需要修改方法，不满足开闭原则；     * 3.不具有可复用性；     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">copyUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> cloneUser <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cloneUser<span class="token punctuation">.</span><span class="token function">setCar</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cloneUser<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 方法三：使用Java自带的流方式实现     * 优点：     * 1.不破坏类的封装，无需了解被copy对象的内部     * 2.不需要依赖第三方包     * 3.代码可复用     * 缺点：     * 1.需要实现Serializable接口，会有额外的开销     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">copyUser3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ByteArrayOutputStream</span> bos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">)</span><span class="token punctuation">;</span>        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ByteArrayInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>bos<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">User</span><span class="token punctuation">)</span> ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 方法四：使用第三方包Jackson实现     * 优点：     * 1.不破坏类的封装，无需了解被copy对象的内部     * 2.不需要实现接口     * 3.代码可复用     * 缺点：     * 1.需要依赖第三方包     * 2.内部实现复杂     */</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">copyUser4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">JsonProcessingException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ObjectMapper</span> objectMapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> objectMapper<span class="token punctuation">.</span><span class="token function">readValue</span><span class="token punctuation">(</span>objectMapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CopyDemo</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span><span class="token punctuation">,</span> <span class="token class-name">CloneNotSupportedException</span><span class="token punctuation">,</span> <span class="token class-name">ClassNotFoundException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCategory</span><span class="token punctuation">(</span><span class="token string">"工人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setCar</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"保时捷"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setId</span><span class="token punctuation">(</span><span class="token number">999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setColor</span><span class="token punctuation">(</span><span class="token string">"黑色"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> copyUser1 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">copyUser1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser1:"</span> <span class="token operator">+</span> copyUser1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser1与user对象是否是同一个:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser1中的car与user中的car是否是同一个:"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser1<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> copyUser2 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">copyUser2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser2:"</span> <span class="token operator">+</span> copyUser2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser2与user对象是否是同一个:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser2中的car与user中的car是否是同一个:"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser2<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> copyUser3 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">copyUser3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser3:"</span> <span class="token operator">+</span> copyUser3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser3与user对象是否是同一个:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser3中的car与user中的car是否是同一个:"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser3<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"===================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> copyUser4 <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">copyUser4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser4:"</span> <span class="token operator">+</span> copyUser4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser4与user对象是否是同一个:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"copyUser4中的car与user中的car是否是同一个:"</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>user<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">identityHashCode</span><span class="token punctuation">(</span>copyUser4<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="验证结果"><a href="#验证结果" class="headerlink" title="验证结果"></a>验证结果</h1><pre class="line-numbers language-none"><code class="language-none">copyUser1:User(id&#x3D;3, age&#x3D;10, name&#x3D;李四, car&#x3D;Car(id&#x3D;999, color&#x3D;黑色, name&#x3D;保时捷), category&#x3D;工人)copyUser1与user对象是否是同一个:falsecopyUser1中的car与user中的car是否是同一个:false&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copyUser2:User(id&#x3D;3, age&#x3D;10, name&#x3D;李四, car&#x3D;Car(id&#x3D;999, color&#x3D;黑色, name&#x3D;保时捷), category&#x3D;工人)copyUser2与user对象是否是同一个:falsecopyUser2中的car与user中的car是否是同一个:false&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copyUser3:User(id&#x3D;3, age&#x3D;10, name&#x3D;李四, car&#x3D;Car(id&#x3D;999, color&#x3D;黑色, name&#x3D;保时捷), category&#x3D;工人)copyUser3与user对象是否是同一个:falsecopyUser3中的car与user中的car是否是同一个:false&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;copyUser4:User(id&#x3D;3, age&#x3D;10, name&#x3D;李四, car&#x3D;Car(id&#x3D;999, color&#x3D;黑色, name&#x3D;保时捷), category&#x3D;工人)copyUser4与user对象是否是同一个:falsecopyUser4中的car与user中的car是否是同一个:false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>使用java原生推荐方法三，方法一、方法二缺点过于明显，第三方库的方式可以用方法四，spring boot默认的序列化反序列化就是Jackson，另外比照方法四同类的类库也能实现</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>已提交git的文件名大小写修改</title>
      <link href="/2021/03/12/%E5%B7%B2%E6%8F%90%E4%BA%A4git%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E4%BF%AE%E6%94%B9/"/>
      <url>/2021/03/12/%E5%B7%B2%E6%8F%90%E4%BA%A4git%E7%9A%84%E6%96%87%E4%BB%B6%E5%90%8D%E5%A4%A7%E5%B0%8F%E5%86%99%E4%BF%AE%E6%94%B9/</url>
      
        <content type="html"><![CDATA[<ol><li><p><strong>设置 Git 的 core.ignorecase 为 true</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config core.ignorecase <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>使用 git mv 命令来重命名文件</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">mv</span> oldfilename NewFilename<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如，如果你将文件名从 <code>oldfile.txt</code> 改为 <code>NewFile.txt</code>，你可以执行以下命令：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">mv</span> oldfile.txt NewFile.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>提交更改</strong>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"Rename file from oldfile.txt to NewFile.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><p>这样做可以确保 Git 正确地追踪文件名的更改，并且在不同的操作系统中都能得到正确的文件名。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vue-cli打包filenameHashing不生效问题</title>
      <link href="/2020/11/08/vue-cli%E6%89%93%E5%8C%85filenamehashing%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/"/>
      <url>/2020/11/08/vue-cli%E6%89%93%E5%8C%85filenamehashing%E4%B8%8D%E7%94%9F%E6%95%88%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>自己的一个vue2.x项目，发现发布的时候有缓存问题，查阅官方文档发现vue.config.js有filenameHashing这个配置且默认是开启的，但是本地打包一直不生效，而且发现配置的打包插件（例如代码压缩）也不生效，</p><p>再次查阅官方文档，在环境变量配置时发现了问题所在，找到下图文档，文档链接<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F">https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F</a></p><p><img src="/images/1636343255396991.png" alt="image.png" title="1636343255396991.png"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ol><li><p>找到项目中的.env.xxx文件，我的配置文件命名是.env.prod</p></li><li><p>在文件头部增加NODE_ENV &#x3D; ‘production’</p></li><li><p>再次打包查看dist目录生成文件命名是否已经hash</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 问题解决 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HashMap源码阅读心得（JDK11)</title>
      <link href="/2019/03/11/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%BF%83%E5%BE%97/"/>
      <url>/2019/03/11/HashMap%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<h3 id="HashMap-基本概念"><a href="#HashMap-基本概念" class="headerlink" title="HashMap 基本概念"></a>HashMap 基本概念</h3><ul><li><code>HashMap</code> 是 Java 中用于存储键值对的散列表实现。它通过哈希算法来计算键的哈希码，并根据哈希码将键值对存储在数组中的特定位置，以实现快速的查找和插入操作。</li></ul><h3 id="HashMap-默认值"><a href="#HashMap-默认值" class="headerlink" title="HashMap 默认值"></a>HashMap 默认值</h3><ul><li>初始容量：<code>16</code>（<code>DEFAULT_INITIAL_CAPACITY</code>）</li><li>负载因子：<code>0.75</code>（<code>DEFAULT_LOAD_FACTOR</code>）</li><li>树化阈值：<code>8</code>个元素（<code>TREEIFY_THRESHOLD</code>）</li><li>最小树化容量：<code>64</code>个桶（<code>MIN_TREEIFY_CAPACITY</code>）</li></ul><h3 id="扩容机制"><a href="#扩容机制" class="headerlink" title="扩容机制"></a>扩容机制</h3><ul><li>当哈希表中的元素个数达到容量与负载因子的乘积时，会触发扩容操作。默认情况下，负载因子为 <code>0.75</code>，因此当元素个数超过 <code>容量 * 0.75</code> 时，会进行扩容。</li><li>扩容操作会将哈希表的容量扩大为原来的两倍，并将原有的元素重新分配到新的更大的数组中。</li></ul><h3 id="树化机制"><a href="#树化机制" class="headerlink" title="树化机制"></a>树化机制</h3><ul><li>当某个桶中的元素个数达到 <code>8</code> 个时，会将该桶中的链表结构转换为红黑树结构，以提高查询性能。</li><li>树化操作可以减少哈希碰撞造成的影响，从而保持哈希表的查询性能在较高的水平上。</li></ul><h3 id="线程安全注意事项"><a href="#线程安全注意事项" class="headerlink" title="线程安全注意事项"></a>线程安全注意事项</h3><ul><li><code>HashMap</code> 不是线程安全的数据结构，如果多个线程同时访问或修改 <code>HashMap</code>，可能会导致不确定的结果。</li><li>如果需要在多线程环境中使用 <code>HashMap</code>，应该考虑使用线程安全的 <code>ConcurrentHashMap</code> 或通过外部同步手段来保证线程安全。</li><li>在对 <code>HashMap</code> 进行迭代时，应该注意其他线程可能对 <code>HashMap</code> 进行修改，这可能导致 <code>ConcurrentModificationException</code> 异常。建议在迭代时使用迭代器的 <code>remove()</code> 方法来进行安全的删除操作。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>HashMap</code> 是 Java 中常用的键值对存储结构，具有快速的查询和插入性能。了解 <code>HashMap</code> 的默认值、扩容机制、树化机制以及线程安全注意事项可以帮助我们更好地理解和使用 <code>HashMap</code>，并且在实际开发中避免潜在的问题。</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习心得 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CAS学习心得</title>
      <link href="/2019/01/19/CAS%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
      <url>/2019/01/19/CAS%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>Java 中的 CAS（Compare and Swap）是一种无锁的并发控制机制，常用于实现线程安全的操作。它的底层实现依赖于 CPU 提供的原子指令。</p><h3 id="CAS-的底层实现："><a href="#CAS-的底层实现：" class="headerlink" title="CAS 的底层实现："></a>CAS 的底层实现：</h3><ol><li><p><strong>原子指令：</strong> CAS 利用处理器提供的原子指令实现。这些原子指令能够保证在同一时刻只有一个线程能够修改共享变量的值，从而避免了多个线程同时修改变量导致的数据不一致问题。</p></li><li><p><strong>CAS 操作：</strong> CAS 操作是一种乐观锁的机制，它包括三个参数：需要修改的内存位置的地址、原来的预期值以及新值。CAS 操作首先读取内存中的当前值，然后和预期值进行比较，如果相同，则将新值写入内存中，如果不同，则不做任何操作。整个过程是原子的。</p></li><li><p><strong>CPU 指令级支持：</strong> 多数现代 CPU 支持 CAS 操作，如 Intel 的 <code>LOCK CMPXCHG</code> 指令和 ARM 的 <code>LDREX</code> 和 <code>STREX</code> 指令。这些指令能够在硬件级别上实现对内存的原子操作，保证了 CAS 操作的原子性和线程安全性。</p></li></ol><h3 id="CAS-的原理："><a href="#CAS-的原理：" class="headerlink" title="CAS 的原理："></a>CAS 的原理：</h3><p>CAS 操作的原理可以简单概括为“预期值与当前值比较，相同则更新为新值”。具体来说：</p><ol><li>线程读取共享变量的当前值，并保存在一个临时变量中。</li><li>线程比较临时变量的值与预期值是否相同。如果相同，则说明其他线程没有修改过共享变量，可以进行更新操作。</li><li>如果相同，则线程将新值写入共享变量中；如果不同，则说明共享变量已经被其他线程修改，更新失败，需要重新尝试。</li></ol><p>CAS 操作的优势在于不需要加锁，避免了线程切换和锁竞争带来的性能损失。但是 CAS 也存在一些缺点，例如 ABA 问题（即一个值被修改两次变回原值，在设置值的时候加入版本号或者时间戳可解决）以及自旋操作的性能开销（会一直占用CPU资源）。</p>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchorized关键字的学习心得</title>
      <link href="/2019/01/19/synchorized%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/"/>
      <url>/2019/01/19/synchorized%E5%85%B3%E9%94%AE%E5%AD%97%E7%9A%84%E5%AD%A6%E4%B9%A0%E5%BF%83%E5%BE%97/</url>
      
        <content type="html"><![CDATA[<p>Java 中的 <code>synchronized</code> 关键字是用于实现线程同步的机制，用于保护临界区代码，在多线程环境下保证数据的一致性和线程安全性。其底层实现主要涉及到对象头、Monitor 和锁升级等机制，以下是 <code>synchronized</code> 底层实现的主要步骤和机制：</p><ol><li><p><strong>对象头信息：</strong></p><ul><li>Java 对象在内存中的存储分为对象头（Header）、实例数据和对齐填充三部分。</li><li>对象头中包含了锁相关的信息，如 Mark Word 存储对象的 hashCode、GC 分代年龄、锁标记位等。</li></ul></li><li><p><strong>Monitor（监视器）：</strong></p><ul><li>Monitor 是 <code>synchronized</code> 实现同步的基础，每个 Java 对象都与一个 Monitor 关联。</li><li>Monitor 内部包含了互斥锁（Mutex）和线程等待队列。</li><li>当线程进入 <code>synchronized</code> 代码块时，它会尝试获取对象的 Monitor，并尝试对 Monitor 的互斥锁进行加锁。</li></ul></li><li><p><strong>锁升级：</strong></p><ul><li><code>synchronized</code> 关键字存在锁的升级过程，包括偏向锁、轻量级锁和重量级锁。</li><li>当一个线程访问同步代码块时，会先尝试偏向锁，如果偏向锁被其他线程占用，则升级为轻量级锁。</li><li>轻量级锁的竞争失败后，会升级为重量级锁（即传统的互斥锁），此时会涉及到线程阻塞和操作系统原语等底层机制。</li></ul></li><li><p><strong>锁的释放和解锁：</strong></p><ul><li>当线程退出 <code>synchronized</code> 代码块时，会释放对象的 Monitor，并尝试对 Monitor 的互斥锁进行解锁。</li><li>如果存在等待线程，会选择唤醒其中一个等待线程，并将锁转移到被唤醒的线程上。</li></ul></li></ol><p>总的来说，<code>synchronized</code> 关键字的底层实现涉及到对象头信息、Monitor、锁升级和锁的释放等机制，通过这些机制实现了对临界区代码的互斥访问和线程同步。在 Java 中，<code>synchronized</code> 是最常用的线程同步方式之一，但在 JDK 5 之后，由于引入了更灵活的 <code>java.util.concurrent</code> 包中的锁机制，<code>synchronized</code> 逐渐被 <code>ReentrantLock</code>、<code>ReadWriteLock</code> 等替代，以满足更复杂的并发控制需求。</p>]]></content>
      
      
      <categories>
          
          <category> java多线程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多线程 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
